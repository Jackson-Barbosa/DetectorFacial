using System;
using Emgu.CV;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using Emgu.CV.Structure;
using System.IO;

namespace DetectorFacial
{
    public partial class Form1 : Form
    {
        // Variáveis:
        HaarCascade FaceDetectada;

        Image<Bgr, Byte> frame;
        Image <Gray, byte> result;
        Image <Gray, byte> FaceTreinada;
        Image <Gray, byte> FaceCinza;

        List<Image<Gray, byte>> treinandoFace = new List<Image<Gray, byte>>();
        List<string> marcadores = new List<string>();
        List<string> usuario = new List<string>();

        Capture camera;

        int Contador, numMarcadores, t;
        string nome, nomes = null;

        public Form1()
        {
            InitializeComponent();

            // "HaarCascade" é para detecção de faces.
            FaceDetectada = new HaarCascade("haarcascade_frontalface_default.xml");

            try
            {
                string Marcadorsinf = File.ReadAllText(Application.StartupPath + "/Faces/Faces.txt");
                string[] marcadores = Marcadorsinf.Split(',');

                // O primeiro marcador de todos, irá ser o número de faces salva.
                numMarcadores = Convert.ToInt16(marcadores[0]);
                Contador = numMarcadores;

                string facesSalvas;

                for (int i = 1; i < numMarcadores +1 ; i++)
                {
                    facesSalvas = "Face" + i + ".bmp";
                    treinandoFace.Add(new Image<Gray, byte>(Application.StartupPath + "/Faces/Faces.txt"));
                    marcador.Add(marcadores[i]);
                }


            }
            catch (Exception ex)
            { MessageBox.Show("Banco vazio"); }
        }

        private void btnIniciar_Click(object sender, EventArgs e)
        {
            camera = new Capture();
            camera.QueryFrame();
            Application.Idle += new EventHandler(processandoCamera);
        }

        private void processandoCamera(object sender, EventArgs e)
        {
            usuario.Add("");
            frame = camera.QueryFrame().Resize(320, 240, Emgu.CV.CvEnum.INTER.CV_INTER_CUBIC);
            FaceCinza = frame.Convert<Gray, Byte>();
            MCvAvgComp[][] FaceAtual = FaceCinza.DetectHaarCascade(FaceDetectada, 1.2, 10, Emgu.CV.CvEnum.HAAR_DETECTION_TYPE.DO_CANNY_PRUNING, new Size(20, 20));

            foreach (MCvAvgComp f in FaceAtual[0])
            {
                result = frame.Copy(f.rect).Convert<Gray, Byte>().Resize(100, 100, Emgu.CV.CvEnum.INTER.CV_INTER_CUBIC);
                frame.Draw(f.rect, new Bgr(Color.Green), 3);

                if (treinandoFace.ToArray().Length != 0)
                {
                    MCvTermCriteria termCriteria = new MCvTermCriteria(Contador, 0.001);
                    EigenObjectRecognizer recognizer = new EigenObjectRecognizer(treinandoFace.ToArray(), marcador.ToArray(), 1500, ref termCriteria);
                }
            }
        }
    }
}
